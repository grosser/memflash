Memflash
========

Introduction goes here.


Example
=======

Example goes here.

Authored by Vladimir Andrijevik
Copyright (c) 2009 Zendesk, released under the MIT license


# The Memflash is a mechanism for writing content to memcached rather than the session.
# You want to do this when you're using the cookie based session store, and put texts
# in the flash that are not exactly small. Alternatively, one can create a message model.
# stored the id of a such in the session, and build a presenation mechanism. Memflash just
# piggy-backs the existing flash mechanism. Here's how it works
#
#   flash[:key] = value
# 
# When you "set" a value in the flash, Memflash intercepts the "set" and inspects the value.
# If the value is deemed cause a "too large" session cookie, then instead of writing it to
# the session, Memflash builds a random key, stores the value in memcached by that key, and
# stores the to the memcached data in the session instead of the actual data. Such that
# the above conceptually can be read:
#
#   flash[:key] = Memflash.too_big?(value) ? Memflash.store_and_return_key(value) : value
#
# What's left is to read the value back when flash[:key] gets accessed on a subsequent 
# request. Memcached intercepts the "get" to something conceptually like this:
#
#   Memflash.has_key?(flash[:key]) ? Memflash.read(flash[:key]) : flash[:key]
#

